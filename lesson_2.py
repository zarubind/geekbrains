# 1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого
# элемента. Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а
# указать явно, в программе.

my_list = [5, 6.7, 'Hello', [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'name':'Vasya', 'age': 44}, True, None]
for key, var in enumerate(my_list):
    print(my_list[key], 'is', type(var))

# 2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с индексами 0 и 1,
# 2 и 3 и т.д. При нечетном количестве элементов последний сохранить на своем месте. Для заполнения списка элементов
# необходимо использовать функцию input().

my_list = input('Введите элементы списка через пробел: ').split()
print(my_list)
i = 1
while i < len(my_list):
    my_list[i-1], my_list[i] = my_list[i], my_list[i-1]
    i += 2
print(my_list)

# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится месяц (зима,
# весна, лето, осень). Напишите решения через list и через dict.

my_list = ['winter', 'winter', 'spring', 'spring', 'spring', 'summer', 'summer', 'summer', 'autumn', 'autumn', 'autumn',
           'winter']
my_dict = {1: 'winter', 2: 'winter', 3: 'spring', 4: 'spring', 5: 'spring', 6: 'summer', 7: 'summer', 8: 'summer',
           9: 'autumn', 10: 'autumn', 11: 'autumn', 12: 'winter'}
num = int(input('Введите номер месяца: '))
print('Месяц из списка:', my_list[num - 1])
print('Месяц из словаря:', my_dict[num])
# Не придумал сходу элегантного решения из списков/словарей на 4 значения, либо надо 4 условия, либо цикл на 4 прохода,
# тогда проще длинный список/словарь

# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки.
# Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.

my_list = input('Введите строку: ').split()
for key, var in enumerate(my_list):
    if len(var) > 10:
        var = var[:10]
    print(key, var)

# 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. У пользователя
# необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями, то новый
# элемент с тем же значением должен разместиться после них. Набор натуральных чисел можно задать непосредственно в коде,
# например, my_list = [7, 5, 3, 3, 2].

my_list = [7, 5, 3, 3, 2]
new_el = int(input('Введите новый элемент: '))
for key, var in enumerate(my_list):
    if new_el > var:
        my_list.insert(key, new_el)
        break
print(my_list)

# 6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит
# информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и словарь с параметрами
# (характеристиками товара: название, цена, количество, единица измерения). Структуру нужно сформировать программно,
# т.е. запрашивать все данные у пользователя.

count = int(input('Введите количество товаров: '))
i = 1
my_list = []
while i <= count:
    print('Товар', i)
    name = input('Наименование товара: ')
    cost = int(input('Цена товара: '))
    count_item = int(input('Количество товара: '))
    metric = input('Единицы измерения товара: ')
    my_list.append((i, {'название': name, 'цена': cost, 'количество': count_item, 'ед': metric}))
    i += 1
print(my_list)

new_dict = {}
for key, var in my_list:
    for key1, var1 in var.items():
        if new_dict.get(key1) is None: # если еще не было такого ключа
            new_dict[key1] = [var1]
        else:
            if new_dict[key1].count(var1) == 0: # проверка, что такого же элемента еще нет в списке
                new_dict[key1].append(var1)
print(new_dict)
